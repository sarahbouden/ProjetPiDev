{% extends 'base-front.html.twig' %}

{% block title %}Publication index{% endblock %}

{% block body %}
    <h1>Publication index</h1>
<turbo-frame id="publication-list">
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Titre</th>
                <th>Description</th>
                <th>UrlRessource</th>
                <th>Rating</th>
                <th>actions</th>
            </tr>
        </thead>
        <tbody>
        {% for publication in publications %}
            <tr>
                <td>{{ publication.id }}</td>
                <td>{{ publication.Titre }}</td>
                <td>{{ publication.Description }}</td>
                <td><img src="{{ asset('uploads/' ~ publication.UrlRessource) }}"></td>
                <td>
                    {% if publication.somme == 0 %}
                         <button style="background-color: transparent; border-color: transparent;" onclick="showRatingPopup({{ publication.id }})">⭐️ 0,0 (0)</button>
                    {% else %}
                        {% set numStars = (publication.rating / (publication.somme * 5)) | round(1) %}
                         <button  style="background-color: transparent; border-color: transparent;" onclick="showRatingPopup({{ publication.id }})">⭐️ {{ numStars *5 }} ({{ publication.somme }})</button>
                    {% endif %}
                </td>
                <td>
                    <a href="{{ path('app_publication_show', {'id': publication.id}) }}">show</a>
                    <a href="{{ path('app_publication_edit', {'id': publication.id}) }}">edit</a>
                </td>
            </tr>
        {% else %}
            <tr>
                <td colspan="5">no records found</td>
            </tr>
        {% endfor %}
        </tbody>
    </table>
</turbo-frame>
    <a href="{{ path('app_publication_new') }}">Create new</a>
    <!-- Popup de notation -->
    </turbo-frame>
    <div id="ratingPopup" class="rating-popup" style="display: none;">
        <div class="modal-content">
            <span class="close" onclick="closeRatingPopup()">&times;</span>
            <h3>Noter cette publication</h3>
            <div class="stars-container">
                {% for i in 1..5 %}
                    <div class="star" data-rating="{{ i }}">⭐️</div>
                {% endfor %}
            </div>
        </div>
    </div>
    </turbo-frame>
    <script>
        // Fonction pour afficher la popup de notation
        function showRatingPopup(publicationId) {
            const popup = document.getElementById('ratingPopup');
            popup.style.display = 'block';
            popup.dataset.publicationId = publicationId;
        }
        function closeRatingPopup() {
            const popup = document.getElementById('ratingPopup');
            popup.style.display = 'none';
        }

        // Fonction pour ajouter un événement de clic sur chaque étoile
        function addRatingEvents() {
            const stars = document.querySelectorAll('.rating-popup .star');
            stars.forEach((star) => {
                star.addEventListener('click', () => {
                    const ratingValue = parseInt(star.dataset.rating); // Valeur de notation (1 à 5)
                    const publicationId = parseInt(document.querySelector('.rating-popup').dataset.publicationId); // ID de la publication
                    // Envoyer les données de notation au serveur via une requête AJAX
                    const xhr = new XMLHttpRequest();
                    xhr.open('POST', '/publication/rate-publication'); // Endpoint pour gérer la notation de la publication
                    xhr.setRequestHeader('Content-Type', 'application/json');
                    xhr.onload = function() {
                        if (xhr.status === 200) {
                            // Mettre à jour l'interface utilisateur ou fermer la popup, etc.
                            const popup = document.getElementById('ratingPopup');
                            popup.style.display = 'none';
                            location.reload();
                        }
                    };
                    xhr.send(JSON.stringify({ publicationId, ratingValue }));
                });
            });
        }

        // Appeler la fonction pour ajouter des événements de clic sur les étoiles lorsque la page est chargée
        window.addEventListener('DOMContentLoaded', () => {
            addRatingEvents();
        });

    </script>
    <style>
        /* Style pour la popup de notation */
        .rating-popup {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.4);
        }

        /* Style pour le contenu de la popup */
        .modal-content {
            background-color: #fefefe;
            margin: 10% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 600px;
            position: relative;
        }

        /* Style pour le bouton de fermeture de la popup */
        .close {
            position: absolute;
            top: 10px;
            right: 20px;
            font-size: 20px;
            font-weight: bold;
            cursor: pointer;
        }

        /* Style pour le conteneur des étoiles */
        .stars-container {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }

        /* Style pour chaque étoile */
        .star {
            font-size: 24px;
            margin: 0 5px;
            cursor: pointer;
        }

    </style>
{% endblock %}
